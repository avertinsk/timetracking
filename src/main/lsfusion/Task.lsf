MODULE Task;

REQUIRE Project, Employee, Email, Category;

CLASS Task 'Задача';
TABLE task(Task);

name 'Название' = DATA VARSTRING[100] (Task) CHARWIDTH 20;

description 'Описание' = DATA TEXT (Task);

project 'Проект' = DATA Project (Task);
nameProject 'Проект' (Task e) = name(project(e)); 

CONSTRAINT Task t IS Task AND NOT project(t) MESSAGE 'Для задачи должен быть задан проект. Нельзя удалить проект, по которому есть задачи';

customer 'Клиент' (Task e) = customer(project(e));
nameCustomerProject 'Клиент' (Task e) = name(customer(e));

employee 'Сотрудник' = DATA Employee (Task) NONULL;
nameEmployee 'Сотрудник' (Task e) = name(employee(e)) CHARWIDTH 20;

employee(Task t) <- currentEmployee() WHEN SET(t IS Task);  

CONSTRAINT employee(Task e) AND project(e) AND NOT assigned(project(e), employee(e)) AND NOT (CHANGED (assigned(project(e), employee(e))))
    CHECKED BY employee, project
    MESSAGE 'Для трудозатрат задан сотрудник, не назначенный на проект';

completed 'Завершена' = DATA BOOLEAN (Task);
notCompleted 'Не завершена' (Task t) = t IS Task AND NOT completed(t);

// Тип

CLASS TaskType 'Тип задачи';
TABLE taskType (TaskType);

name 'Название' = DATA VARSTRING[50] (TaskType);

FORM taskTypes 'Типы задач'
    OBJECTS a = TaskType
    PROPERTIES(a) name, NEW, DELETE
;

FORM dialogTaskType 'Выбор типа задачи'
    OBJECTS a = TaskType
    PROPERTIES(a) READONLY name
    
    LIST TaskType OBJECT a;
;

NAVIGATOR {
    masterData {
        NEW taskTypes;
    }
}

taskType 'Тип задачи' = DATA TaskType (Task) NONULL;
nameTaskType 'Тип задачи' (Task t) = name(taskType(t));

// --- Редактирование задачи

FORM task 'Задача'
    OBJECTS t = Task PANEL
    PROPERTIES(t) nameCustomerProject, nameProject, nameTaskType, name, description
    ORDER nameCustomerProject(t)
    
    EDIT Task OBJECT t
;

DESIGN task {
    size = (1024, 768);
    OBJECTS {
        NEW projectInfo FIRST {
            caption = 'Проект';
            type = CONTAINERH;
            MOVE PROPERTY(nameCustomerProject(t));
            MOVE PROPERTY(nameProject(t));
            MOVE PROPERTY(nameTaskType(t));
            MOVE PROPERTY(name(t));
        }
        
        NEW projectDescr {
            fill = 1;
            type = SPLITH;
            MOVE PROPERTY(description(t)) {
                fill = 1;
                panelCaptionAbove = TRUE;
            }
        }
        
    }
}

read 'Обработан' = DATA BOOLEAN (Email);

EXTEND FORM mail PROPERTIES READONLY read(e);

id 'Код' = DATA VARISTRING[15](Project);
project = GROUP AGGR Project p BY id(p);

EXTEND FORM customer PROPERTIES id(p);

emailTaskType = DATA TaskType();
nameEmailTaskType 'Тип задач, созданных по email' () = name(emailTaskType());

EXTEND FORM options PROPERTIES nameEmailTaskType();
DESIGN options { commons { MOVE PROPERTY (nameEmailTaskType()); } }

createEmailTasks () {
    NEWSESSION {
        receiveEmailAction();
        FOR isSubstring(subject(Email e), id(Project p)) AND 
            Employee et = GROUP MAX Employee ee IF email(ee) == fromAddress(e) 
            AND NOT read(e) DO NEW t = Task {
            project(t) <- p;
            name(t) <- trim(replace(subject(e), id(p), ''));
            description(t) <- message(e);
            taskType(t) <- emailTaskType();
            employee(t) <- et;
            read(e) <- TRUE;
        }
        APPLY;
    }
}

category = DATA Category(Task);
nameCategory 'Категория для задачи' (Task t) = name(category(t));

WHEN LOCAL (CHANGED (employee(Task t)) OR CHANGED (project(t))) AND NOT CHANGED (category(t)) DO {
    category(t) <- OVERRIDE category(employee(t), project(t)), category(employee(t));
}

onStarted() + {
    FOR Task t IS Task AND NOT category(t) DO {
        category(t) <- OVERRIDE category(employee(t), project(t)), category(employee(t));
    }
}