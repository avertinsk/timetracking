MODULE Practice;

REQUIRE MasterData;

NAMESPACE Employee;

CLASS Practice 'Практика';
TABLE practice (Practice);

useTreePractics 'Использовать дерево практик' = DATA BOOLEAN ();

EXTEND FORM options PROPERTIES useTreePractics();

DESIGN options {
    commons {
        MOVE PROPERTY (useTreePractics());
    }
}

name 'Наименование' = DATA STRING[50] (Practice) IN id CHARWIDTH 15;

parent 'Родитель' = DATA Practice (Practice);
nameParent 'Родитель' (Practice p) = name(parent(p)); 

level 'Уровень' (Practice c, Practice p) =
   RECURSION 1l IF c IS Practice AND p = c
        STEP 2l IF p = parent($p) MATERIALIZED;

canonicalName 'Каноническое имя' (Practice pr) =
   GROUP CONCAT name(Practice p), ' / ' ORDER DESC level(pr, p) CHARWIDTH 50;

FORM practice 'Практика'
    OBJECTS p = Practice PANEL
    PROPERTIES(p) name, nameParent SHOWIF useTreePractics()
    
    EDIT Practice OBJECT p
;

FORM practices 'Практики'
    OBJECTS p 'Список' = Practice 
    PROPERTIES(p) READONLY name
    PROPERTIES(p) READONLY SHOWIF useTreePractics() nameParent, canonicalName 
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE
    FILTERS NOT parent(p) OR useTreePractics()

    TREE groups g 'Дерево' = Practice PARENT parent(g)
    PROPERTIES(g) READONLY name
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE
    EVENTS ON CHANGE g { SEEK practices.p = g; } 
;

DESIGN practices {
    MOVE BOX (TREE groups) { showIf = useTreePractics(); }
    MOVE BOX(p){ showIf = NOT useTreePractics(); }
}

FORM dialogPractices 'Выбор практики'
    OBJECTS p 'Список' = Practice 
    PROPERTIES(p) READONLY name
    PROPERTIES(p) READONLY SHOWIF useTreePractics() nameParent, canonicalName 
    FILTERS NOT parent(p) OR useTreePractics()

    TREE groups g 'Дерево' = Practice PARENT parent(g)
    PROPERTIES(g) READONLY name
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE
    EVENTS ON CHANGE g { SEEK dialogPractices.p = g; }
        
    LIST Practice OBJECT p
;

DESIGN dialogPractices {
    MOVE BOX (TREE groups) { showIf = useTreePractics(); }
    MOVE BOX(p){ showIf = NOT useTreePractics(); }
}

NAVIGATOR {
    masterData {
        NEW practices;
    }
}