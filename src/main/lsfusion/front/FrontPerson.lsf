MODULE FrontPerson;

REQUIRE Person, FrontSession;

NAMESPACE Front;

getPersons(TEXT token, FILE f) {
    
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    EXPORT JSON FROM id = Person p, lastName(p), firstName(p), middleName(p), lastNameRp(p), firstNameRp(p), middleNameRp(p), 
                     birthday(p), address(p), seriesPassport(p), numberPassport(p), authorityPassport(p), dateIssuePassport(p), 
                     codeUnitPassport(p), phone(p), inn(p), snils(p), numberAccount(p), bank(p) WHERE customer(p) == customer(frontUser(frontSession(token)));
}

addPerson(TEXT token, FILE f) {
      
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
      
    LOCAL id = LONG ();
    LOCAL lastName = VARSTRING[250]();
    LOCAL firstName = VARSTRING[250]();
    LOCAL middleName = VARSTRING[250]();
    LOCAL lastNameRp = VARSTRING[250]();
    LOCAL firstNameRp = VARSTRING[250]();
    LOCAL middleNameRp = VARSTRING[250]();
    LOCAL birthday = DATE();
    LOCAL address = VARSTRING[250]();
    LOCAL seriesPassport = VARSTRING[250]();
    LOCAL numberPassport = VARISTRING[50] ();
    LOCAL authorityPassport = VARSTRING[250]();
    LOCAL dateIssuePassport = DATE ();
    LOCAL codeUnitPassport = VARSTRING[250]();
    LOCAL phone = VARSTRING[250]();
    LOCAL inn = VARSTRING[250]();
    LOCAL snils = VARSTRING[250]();
    LOCAL numberAccount = VARSTRING[250]();
    LOCAL bank = LONG ();
    
    IMPORT JSON FROM f AS FILE TO() id = id, lastName = lastName, firstName = firstName, middleName = middleName, 
    lastNameRp = lastNameRp, firstNameRp = firstNameRp, middleNameRp = middleNameRp, birthday = birthday, address = address, seriesPassport = seriesPassport, 
    numberPassport = numberPassport, authorityPassport = authorityPassport, dateIssuePassport = dateIssuePassport, codeUnitPassport = codeUnitPassport, 
    phone = phone, inn = inn, snils = snils, numberAccount = numberAccount, bank = bank;

    IF id() AND NOT (GROUP MAX Person p AS Person IF LONG (p) == id()) THEN {
        EXPORT JSON FROM code = '1', message = 'Не найдено физ. лицо по коду';
        RETURN;
    }
    
    IF NOT id() THEN NEW p = Person {
        id() <- LONG (p);
    }
    
    FOR LONG (Person p AS Person) == id() DO {
        customer(p) <- customer(frontUser(frontSession(token)));
        lastName(p) <- lastName();
        firstName(p) <- firstName(); 
        middleName(p) <- middleName(); 
        lastNameRp(p) <- lastNameRp(); 
        firstNameRp(p) <- firstNameRp(); 
        middleNameRp(p) <- middleNameRp(); 
        birthday(p) <- birthday(); 
        address(p) <- address(); 
        seriesPassport(p) <- seriesPassport(); 
        numberPassport(p) <- numberPassport(); 
        authorityPassport(p) <- authorityPassport(); 
        dateIssuePassport(p) <- dateIssuePassport(); 
        codeUnitPassport(p) <- codeUnitPassport(); 
        phone(p) <- phone(); 
        inn(p) <- inn(); 
        snils(p) <- snils(); 
        numberAccount(p) <- numberAccount(); 
        bank(p) <- GROUP MAX Bank b AS Bank IF LONG (b) == bank();
    }
    APPLY;
    
    EXPORT JSON FROM code = '0', message = 'OK';
}

deletePerson(TEXT token, FILE f) {
        
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    LOCAL id = LONG ();
    
    IMPORT JSON FROM f AS FILE TO() id = id;
    
    FOR LONG (Person p AS Person) == id() DO {
        DELETE p;
    }
    APPLY;
    
    EXPORT JSON FROM code = '0', message = 'OK';
}