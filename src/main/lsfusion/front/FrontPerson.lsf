MODULE FrontPerson;

REQUIRE Person, FrontSession, System;

NAMESPACE Front;

FORM exportPersons
    OBJECTS c = Customer PANEL 
    OBJECTS p = Person
    PROPERTIES IN public id = LONG (p), lastName = lastName(p), firstName = firstName(p), middleName = middleName(p), seriesPassport = seriesPassport(p), numberPassport = numberPassport(p), birthday = birthday(p)
    FILTERS customer(p) == c
    PROPERTIES code = '0'
;

getPersons(TEXT token, FILE f) {
    
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    EXPORT exportPersons OBJECTS c = customer(frontUser(frontSession(token))) JSON;
}

hasPassport (Person p) = CASE WHEN filePassport(p) THEN 1 ELSE 0;
hasSnils (Person p) = CASE WHEN fileSnils(p) THEN 1 ELSE 0;

FORM exportPerson
    OBJECTS p = Person PANEL 
    PROPERTIES IN public id = LONG (p), lastName = lastName(p), firstName = firstName(p), middleName = middleName(p), lastNameRp = lastNameRp(p), 
                         firstNameRp = firstNameRp(p), middleNameRp = middleNameRp(p), birthday = birthday(p), address = address(p), 
                         seriesPassport = seriesPassport(p), numberPassport = numberPassport(p), authorityPassport = authorityPassport(p), 
                         dateIssuePassport = dateIssuePassport(p), codeUnitPassport = codeUnitPassport(p), phone = phone(p), inn = inn(p), 
                         snils = snils(p), numberAccount = numberAccount(p), bank = LONG (bank(p)), code = '0', hasPassport = hasPassport(p), hasSnils = hasSnils(p)
               
    OBJECTS child = Child
    PROPERTIES name_child = name(child), birthday_child = birthday(child)
    FILTERS parent(child) == p
;

getPerson(TEXT token, FILE f) {
    
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    LOCAL id = LONG ();
    
    IMPORT JSON FROM f AS FILE TO() id = id;
    
    FOR LONG (Person p AS Person) == id() DO {
        EXPORT exportPerson OBJECTS p = p JSON;
        RETURN;
    }
    
    EXPORT JSON FROM code = '404', message = 'Неверный id';
}

id = DATA LOCAL LONG ();
lastName = DATA LOCAL VARSTRING[250]();
firstName = DATA LOCAL VARSTRING[250]();
middleName = DATA LOCAL VARSTRING[250]();
lastNameRp = DATA LOCAL VARSTRING[250]();
firstNameRp = DATA LOCAL VARSTRING[250]();
middleNameRp = DATA LOCAL VARSTRING[250]();
birthday = DATA LOCAL DATE();
address = DATA LOCAL VARSTRING[250]();
seriesPassport = DATA LOCAL VARSTRING[250]();
numberPassport = DATA LOCAL VARISTRING[50] ();
authorityPassport = DATA LOCAL VARSTRING[250]();
dateIssuePassport = DATA LOCAL DATE ();
codeUnitPassport = DATA LOCAL VARSTRING[250]();
phone = DATA LOCAL VARSTRING[250]();
inn = DATA LOCAL VARSTRING[250]();
snils = DATA LOCAL VARSTRING[250]();
numberAccount = DATA LOCAL VARSTRING[250]();
bank = DATA LOCAL LONG ();
filePassport = DATA LOCAL VARISTRING[50]();
fileSnils = DATA LOCAL VARISTRING[50]();

name_child = DATA VARISTRING[250](INTEGER);
birthday_child = DATA DATE (INTEGER);

FORM importPerson
    PROPERTIES id = id(), lastName = lastName(), firstName = firstName(), middleName = middleName(), lastNameRp = lastNameRp(), 
                 firstNameRp = firstNameRp(), middleNameRp = middleNameRp(), birthday = birthday(), address = address(), 
                 seriesPassport = seriesPassport(), numberPassport = numberPassport(), authorityPassport = authorityPassport(), 
                 dateIssuePassport = dateIssuePassport(), codeUnitPassport = codeUnitPassport(), phone = phone(), inn = inn(), 
                 snils = snils(), numberAccount = numberAccount(), bank = bank(), filePassport = filePassport(), fileSnils = fileSnils()
       
    OBJECTS child = INTEGER 
    PROPERTIES name_child = name_child(child), birthday_child = birthday_child(child)
;

addPerson(TEXT token, FILE f) {
      
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
        
    fileToString(f, 'UTF-8');
    logToFile('API', 'addPerson:\n' + resultString());
    
    IMPORT importPerson JSON FROM f AS FILE;

    IF id() AND NOT (GROUP MAX Person p AS Person IF LONG (p) == id()) THEN {
        EXPORT JSON FROM code = '404', message = 'Не найдено физ. лицо по коду';
        RETURN;
    }
    
    IF NOT id() THEN NEW p = Person {
        id() <- LONG (p);
    }
    
    FOR LONG (Person p AS Person) == id() DO {
        customer(p) <- customer(frontUser(frontSession(token)));
        lastName(p) <- lastName();
        firstName(p) <- firstName(); 
        middleName(p) <- middleName(); 
        lastNameRp(p) <- lastNameRp(); 
        firstNameRp(p) <- firstNameRp(); 
        middleNameRp(p) <- middleNameRp(); 
        birthday(p) <- birthday(); 
        address(p) <- address(); 
        seriesPassport(p) <- seriesPassport(); 
        numberPassport(p) <- numberPassport(); 
        authorityPassport(p) <- authorityPassport(); 
        dateIssuePassport(p) <- dateIssuePassport(); 
        codeUnitPassport(p) <- codeUnitPassport(); 
        phone(p) <- phone(); 
        inn(p) <- inn(); 
        snils(p) <- snils(); 
        numberAccount(p) <- numberAccount(); 
        bank(p) <- GROUP MAX Bank b AS Bank IF LONG (b) == bank();
        
        filePassport(p) <- file(frontSession(token), filePassport());
        fileSnils(p) <- file(frontSession(token), fileSnils());
        
        FOR name_child(INTEGER c) DO NEW ch = Child {
            parent(ch) <- p;
            name(ch) <- name_child(c);
            birthday(ch) <- birthday_child(c);
        }
    }
    APPLY NESTED (id[]);
    EXPORT JSON FROM id = id(), code = '0';
}

deletePerson(TEXT token, FILE f) {
        
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    LOCAL id = LONG ();
    
    IMPORT JSON FROM f AS FILE TO() id = id;
    
    FOR LONG (Person p AS Person) == id() DO {
        DELETE p;
    }
    APPLY;
    
    EXPORT JSON FROM code = '0', message = 'OK';
}

file = DATA FILE (Person, VARISTRING[50]);

downloadPersonFile(LONG person, VARISTRING[50] fileName, TEXT token, FILE f) {
    
    checkToken(token);
    IF invalidToken() THEN RETURN;
    
    LOCAL file = FILE ();
    
    FOR LONG (Person p AS Person) == person DO {
        
        IF fileName = 'passport' THEN {
            file() <- filePassport(p);
        }
        IF fileName = 'snils' THEN {
            file() <- fileSnils(p);
        }
    }
    
    exportFile() <- file();
}

getPersonByPassport (TEXT token, FILE f) {
        
    checkToken(token);
    IF invalidToken() THEN {
        RETURN;
    }
    
    LOCAL series = VARISTRING[50] ();
    LOCAL number = VARISTRING[50] ();
    
    IMPORT JSON FROM f AS FILE TO() series = series, number = number;
    
    FOR seriesPassport(Person p) == series() AND numberPassport(p) == number() DO {
        EXPORT JSON FROM code = '0', id = LONG (p AS Person);
        RETURN;
    }
    EXPORT JSON FROM code = '404', message = 'Физ. лицо не найдено';
}